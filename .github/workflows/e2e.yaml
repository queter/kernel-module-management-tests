name: e2e

on: [pull_request]

env:
  GO_VERSION: 1.18

jobs:
  build-operator-image:
    runs-on: ubuntu-latest

    name: Build the KMMO container image

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build the image
        run: docker build -t kmm:local .

      - name: Export the image
        run: docker save -o kmm_local.tar kmm:local

      - name: Upload the image
        uses: actions/upload-artifact@v3
        with:
          name: ci-images
          if-no-files-found: error
          path: kmm_local.tar
          retention-days: 1

  e2e:
    runs-on: ubuntu-latest

    name: Prebuilt kernel module

    needs: [build-operator-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create the minikube cluster
        uses: ./.github/actions/create-minikube-cluster

      - name: Label the node so that it gets the module
        run: kubectl label node minikube wants-module=kmm_ci_a

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Save the kernel version
        run: echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV

      - name: Build the DriverContainer image
        uses: ./.github/actions/build-drivercontainer-image
        with:
          kernel-version: ${{ env.KERNEL_VERSION }}

      - name: Import images into minikube
        run: |
          minikube image load kmm_local.tar
          minikube image load kmm-kmod_local.tar

      - name: Run e2e-prebuilt-kernel-module tests
        run: ../ci/prow/e2e-prebuilt-kernel-module

  e2e-two-nodes:
    name: Prebuilt kernel module - two nodes

    runs-on: ubuntu-latest

    needs: [build-operator-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create the minikube cluster
        uses: ./.github/actions/create-minikube-cluster
        with:
          start-args: --nodes 2

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Save the kernel version
        run: echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV

      - name: Build the DriverContainer image
        uses: ./.github/actions/build-drivercontainer-image
        with:
          kernel-version: ${{ env.KERNEL_VERSION }}

      - name: Import images into minikube
        run: |
          minikube image load kmm_local.tar
          minikube image load kmm-kmod_local.tar

      - name: Run e2e-prebuilt-kernel-module-two-nodes tests
        run: ../ci/prow/e2e-prebuilt-kernel-module-two-nodes



  in-cluster-build:
    runs-on: ubuntu-latest

    name: In-cluster build

    needs: [build-operator-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create the minikube cluster
        uses: ./.github/actions/create-minikube-cluster
        with:
          start-args: --addons registry,registry-aliases

      - name: Expose the registry outside the cluster
        run: kubectl apply -f ci/registry-nodeport.yaml

      - name: Install skopeo
        run: |
          sudo apt -y update
          sudo apt -y install skopeo

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Save the kernel version
        run: echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV

      - name: Build the DriverContainer image
        uses: ./.github/actions/build-drivercontainer-image
        with:
          kernel-version: ${{ env.KERNEL_VERSION }}

      - name: Import DriverContainer base into the internal-registry
        run: |
          MINIKUBE_REGISTRY_EXT="$(minikube service registry-nodeport -n kube-system --format '{{.IP}}:{{.Port}}' --url)"
          skopeo copy --dest-tls-verify=false docker-archive:kmm-kmod_local.tar docker://${MINIKUBE_REGISTRY_EXT}/kmm-base:local

      - name: Import the KMMO image into minikube
        run: minikube image load kmm_local.tar

      - name: Run e2e-incluster-build tests
        run: ../ci/prow/e2e-incluster-build

  e2e-crd-variable:
    runs-on: ubuntu-latest

    name: Container image CRD variable

    needs: [build-operator-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create the minikube cluster
        uses: ./.github/actions/create-minikube-cluster

      - name: Download container images
        uses: actions/download-artifact@v3
        with:
          name: ci-images

      - name: Save the kernel version
        run: echo "KERNEL_VERSION=$(uname -r)" >> $GITHUB_ENV

      - name: Build the DriverContainer image
        uses: ./.github/actions/build-drivercontainer-image
        with:
          kernel-version: ${{ env.KERNEL_VERSION }}

      - name: Import images into minikube
        run: |
          minikube image load kmm_local.tar
          minikube image load kmm-kmod_local.tar

      - name: Tag the DriverContainer image with the kernel version
        run: minikube image tag kmm-kmod:local kmm-kmod:${{ env.KERNEL_VERSION }}

      - name: Run e2e-crd-variable tests
        run: ../ci/prow/e2e-crd-variable

